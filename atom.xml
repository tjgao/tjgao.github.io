<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Random Thoughts]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://tjgao.github.io/"/>
  <updated>2015-12-07T14:50:19.000Z</updated>
  <id>http://tjgao.github.io/</id>
  
  <author>
    <name><![CDATA[Tiejun Gao]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[小题(3)]]></title>
    <link href="http://tjgao.github.io/2015/12/07/%E5%B0%8F%E9%A2%98-3/"/>
    <id>http://tjgao.github.io/2015/12/07/小题-3/</id>
    <published>2015-12-07T12:14:01.000Z</published>
    <updated>2015-12-07T14:50:19.000Z</updated>
    <content type="html"><![CDATA[<p>闲逛水木，又碰到有人讨论算法小题，题目是这样：数组有N+M个数字, 数字的范围为1 … N, 打印重复的元素, 要求O(M + N), 不可以用额外的空间。</p>
<a id="more"></a>
<p>一个思路是，如果这些数字都按照自然的顺序排列，data[0] = 1, data[1] = 2 … data[K] = K - 1，则由于数字范围为1 … N， 而需要填补的位置是 M + N，必然有不能放在“正确”位置上的数字，这些不在“正确”位置上的数字必然就是重复的。又由于不能使用额外空间，就要利用这个数组本身的空间来腾挪。于是乎，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDup</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;data.size(); i++ ) &#123;</span><br><span class="line">        <span class="keyword">while</span>( data[i] != data[data[i]-<span class="number">1</span>] ) &#123;</span><br><span class="line">            swap( data[i], data[data[i]-<span class="number">1</span>] );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span>( data[i]-<span class="number">1</span> != i ) <span class="built_in">cout</span>&lt;&lt;data[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键的一步是嵌套的第二重while循环，其目的是尽量使得data[i] - 1 = i，如果不能那就算了，留其在原位。那么问题是，这个循环执行多少步？是否一定能够保证任何一个不重复的数字K，能够被放到data[K-1]的位置上？只要这两个问题的答案是令人满意的，这个算法就是高效的。</p>
<p>循环结束的条件是data[i] == data[data[i]-1]，当其结束时，至少data[data[i]-1]已经在正确的位置上了，这其中运行多少次，就有多少个数字归位。但是由于数字范围为1 … N，最多有N个数能归位，每一个归位的数字只要在另一次while循环中被碰到，就会结束while循环。所以，即使不能明确说出某次while循环运行了多少次，总的while循环次数不会超过N。另一个问题，怎么知道一个不重复的K一定可以被正确归位？换个方式问这个问题，如果K不放在data[K-1]上，它能放到哪里去？若 data[M] = K，则 data[data[M]-1] = data[K-1]，如果data[M]-1是个重复的数字，则有data[data[M]-1] = data[M]（重复的数字至少得有个在正确的位置上），所以data[M] = data[K-1] = K，推回来了。如果data[M]-1也不重复，且data[M]-1也不在其正确位置上，这问题变成了另一个，K不重复且不在其位置上，则K-1也是这样，如此这般推下去一直到14。可是1只要存在，一定是可以放到正确的位置上，不信可以在脑子里推一推。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>闲逛水木，又碰到有人讨论算法小题，题目是这样：数组有N+M个数字, 数字的范围为1 … N, 打印重复的元素, 要求O(M + N), 不可以用额外的空间。</p>]]>
    
    </summary>
    
      <category term="algorithm" scheme="http://tjgao.github.io/tags/algorithm/"/>
    
      <category term="算法" scheme="http://tjgao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="技术" scheme="http://tjgao.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小题(2)]]></title>
    <link href="http://tjgao.github.io/2015/10/30/%E5%B0%8F%E9%A2%98-2/"/>
    <id>http://tjgao.github.io/2015/10/30/小题-2/</id>
    <published>2015-10-30T05:05:12.000Z</published>
    <updated>2015-10-30T12:38:03.000Z</updated>
    <content type="html"><![CDATA[<p>一道leetcode小题。描述如下：</p>
<p>Largest Rectangle in Histogram</p>
<p>Given n non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>
<a id="more"></a>
<p><img src="http://www.leetcode.com/wp-content/uploads/2012/04/histogram.png" alt="largest rectangle"><br>Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].</p>
<p><img src="http://www.leetcode.com/wp-content/uploads/2012/04/histogram_area.png" alt="largest rectangle"><br>The largest rectangle is shown in the shaded area, which has area = 10 unit.</p>
<p>For example, Given height = [2,1,5,6,2,3], return 10.</p>
<p>直接反应就是怎么简单怎么来，来个暴力的code：</p>
<pre><code><span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>{
    <span class="keyword">int</span> sz = height.size(), w, ma=<span class="number">0</span>;
    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i++ ) {
        w = <span class="number">0</span>;
        <span class="keyword">for</span>( <span class="keyword">int</span> j=i-<span class="number">1</span>; j&gt;=<span class="number">0</span>; j-- ) <span class="keyword">if</span>( height[j] &gt;= height[i] ) w++; <span class="keyword">else</span> <span class="keyword">break</span>;
        <span class="keyword">for</span>( <span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;sz; j++ ) <span class="keyword">if</span>( height[j] &gt;= height[i] ) w++; <span class="keyword">else</span> <span class="keyword">break</span>;
        <span class="keyword">if</span>( (w + <span class="number">1</span>)*height[i] &gt; ma ) ma = (w + <span class="number">1</span>)*height[i];
    }
    <span class="keyword">return</span> ma;
}
</code></pre><p>至少看上去还是简洁的，不过这是明显的$O(n^2)$时间复杂度，一提交就意料之中的Time Limit Exceeded.</p>
<p>看上去似乎可以用DP的思想，但是却不太容易。[2,2,3,N]，扫描前面几项到3的时候，最好的结果为6，但是N的值对于最终结果有极大影响。N=1，最终结果为6，N=2，最终结果为8，N&gt;=9，结果为N。</p>
<p>注意到暴力解法从任何索引i往前往后扫的时候都没有利用以前的扫描结果，这可能是可以改进的地方。于是引入了个数组来记录前一个索引能够抵达的位置。</p>
<pre><code><span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>{
    <span class="keyword">int</span> sz = height.size(), ma = <span class="number">0</span>, s = <span class="number">0</span>;
    <span class="keyword">if</span>( sz == <span class="number">0</span> ) <span class="keyword">return</span> <span class="number">0</span>;
    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ext(sz), area(sz);
    ext[sz-<span class="number">1</span>] = sz-<span class="number">1</span>, area[sz-<span class="number">1</span>] = height[sz-<span class="number">1</span>];
    ma = height[sz-<span class="number">1</span>];
    <span class="keyword">for</span>( <span class="keyword">int</span> i=sz-<span class="number">2</span>; i&gt;=<span class="number">0</span>; i-- ) {
        <span class="keyword">int</span> n = i+<span class="number">1</span>;
        ext[i] = i;
        <span class="keyword">while</span>( n &lt; sz &amp;&amp; height[i] &lt;= height[n] ) {
            ext[i] = ext[n];
            n = ext[n] + <span class="number">1</span>;
        }
        area[i] = height[i]*(ext[i] - i + <span class="number">1</span>);
    }
    area[<span class="number">0</span>] = height[<span class="number">0</span>];
    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i++ ) {
        <span class="keyword">int</span> n = i-<span class="number">1</span>;
        ext[i] = i;
        <span class="keyword">while</span>( n &gt;= <span class="number">0</span> &amp;&amp; height[i] &lt;= height[n] ) {
            ext[i] = ext[n];
            n = ext[n] - <span class="number">1</span>;
        }
        s = height[i]*(i - ext[i] + <span class="number">1</span> );
        <span class="keyword">if</span>( ma &lt; s + area[i] - height[i] ) ma = s + area[i] - height[i];
    }
    <span class="keyword">return</span> ma;
}
</code></pre><p>第一个循环，是计算从索引i往右延伸，能够抵达的最远的位置，第二个循环，则是i往左能够抵达的位置。由于能够尽量利用前一次扫描的结果，效率大大增加。提交之后显示能够比85%的方案快，20ms跑完90多个测试。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一道leetcode小题。描述如下：</p>
<p>Largest Rectangle in Histogram</p>
<p>Given n non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>]]>
    
    </summary>
    
      <category term="algorithm" scheme="http://tjgao.github.io/tags/algorithm/"/>
    
      <category term="算法" scheme="http://tjgao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="技术" scheme="http://tjgao.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小题(1)]]></title>
    <link href="http://tjgao.github.io/2015/10/30/%E5%B0%8F%E9%A2%98-1/"/>
    <id>http://tjgao.github.io/2015/10/30/小题-1/</id>
    <published>2015-10-29T14:07:19.000Z</published>
    <updated>2015-10-30T09:41:15.000Z</updated>
    <content type="html"><![CDATA[<p>逛买卖提看到一个小题，其实也不难，但是如果在面试中出现，要瞬间找到解法，还是需要在平时多思多练。平时遇到问题也不应轻易放过，自我勉励一下。</p>
<a id="more"></a>
<p>题目是这样： 排序数组中找2个数，使其差等于一个给定值。 数组中都是正数且为unique number，给定一个正整数$k$，找出两个数$A$、$B$，使得$A-B=k$，要求使用常数空间（hash map不能用）、$O(N)$时间。</p>
<p>其实类似于经典的twoSum问题，略作修改而已。当然解决办法也是类似的，用两个指针$i$, $j$指向尾部($i&lt;j$，且一直保证$j$不可能小于$i$)，比较$i$，$j$指向的值的差，若差为$k$，返回。若小于$k$，$i$减1，若大于$k$，$j$减1。一直到$i$小于0为止。</p>
<p>代码如下：</p>
<pre><code>pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; find(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; data, <span class="keyword">int</span> k) {
    <span class="keyword">int</span> sz = data.size(), i = sz-<span class="number">2</span>, j = sz-<span class="number">1</span>;
    <span class="keyword">if</span>( sz &lt;= <span class="number">1</span> ) <span class="keyword">return</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(-<span class="number">1</span>, -<span class="number">1</span>);
    <span class="keyword">while</span>( i&gt;=<span class="number">0</span> ) {
        <span class="keyword">if</span>( data[j] - data[i] &gt; k &amp;&amp; j &gt; i) j--;
        <span class="keyword">else</span> <span class="keyword">if</span>( data[j] - data[i] == k &amp;&amp; j &gt; i) <span class="keyword">return</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(data[i], data[j]);
        <span class="keyword">else</span> i--;
    }
    <span class="keyword">return</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(-<span class="number">1</span>, -<span class="number">1</span>);
}
</code></pre><p>如果找不到满足条件的$A$和$B$，则返回的pair的一对值是相等的，且都为-1。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>逛买卖提看到一个小题，其实也不难，但是如果在面试中出现，要瞬间找到解法，还是需要在平时多思多练。平时遇到问题也不应轻易放过，自我勉励一下。</p>]]>
    
    </summary>
    
      <category term="algorithm" scheme="http://tjgao.github.io/tags/algorithm/"/>
    
      <category term="算法" scheme="http://tjgao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="技术" scheme="http://tjgao.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RMQ 算法]]></title>
    <link href="http://tjgao.github.io/2015/08/17/RMQ-%E7%AE%97%E6%B3%95/"/>
    <id>http://tjgao.github.io/2015/08/17/RMQ-算法/</id>
    <published>2015-08-17T10:56:51.000Z</published>
    <updated>2015-11-14T03:45:24.000Z</updated>
    <content type="html"><![CDATA[<p>RMQ (Range Minimum/Maximum Query，区间最值) 问题，是指给定一个区间，然后询问在区间某一局部区域的最值是什么。比如给出一个长度为$n$的数组$N$，然后每次给出索引号$i$和$j$，问：$N[i]$和$N[j]$之间的最大（小）值是什么。</p>
<a id="more"></a>
<p>一个简单的办法是，逐个扫描，复杂度为$O(n)$。问题在于，如果询问的次数非常多，每次都逐个扫描，性能一定很差。显然，如果能预先准备好数据，然后直接查询会快多了。这里，又是一个使用动态规划的理想场所。其解决办法被称为 Sparse Table (稀疏表)。</p>
<p>准备一个二维数组$A[n][m]$，$n$为数组长度，而$m$则为$1+log_2{n}$。对于数组中任何一个元素$A[i][j]$，记录了起始于索引$i$，长度为$2^j$的区间的最值。$A[i][j]$可以被均分为$A[i][j-1]$以及$A[i+2^{j-1}][j-1]$，从动态规划的观点看，已经找到了最为关键的递推关系(假设求的是最小值)：<br>$$A[i][j] = min(A[i][j-1], A[i+2^{j-1}][j-1])$$</p>
<p>很显然，$A[i][0]$就是$N[i]$，只有一个值，最值就是这个值。于是乎，其他值也就相应求出即可。准备好这个二维数组的时间是$O(nlogn)$。</p>
<p>怎么使用这个表呢？假设给出的区间是$u$和$v$，则$u$和$v$之间的长度为$v-u+1$，可得出$k=log_2(v-u+1)$，则以下两个区间一定覆盖了所求区间，即$A[u][k]$和$A[1+v-2^k][k]$。有重叠区域也无所谓，它们的最小值中较小的那个仍然是最后所求的值。即：<br>$$RMQ(u,v) = min(A[u][k], A[1+v-2^k][k])$$<br>时间复杂度为$O(1)$。</p>
<pre><code><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; st(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v) {
    <span class="keyword">int</span> sz = v.size();
    <span class="keyword">int</span> k = <span class="keyword">int</span>(<span class="built_in">log</span>(sz)/<span class="built_in">log</span>(<span class="number">2</span>)) + <span class="number">1</span>;
    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; table(sz, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(k));
    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i++ )
        table[i][<span class="number">0</span>] = v[i];
    <span class="keyword">int</span> j = <span class="number">1</span>;
    <span class="keyword">while</span>( <span class="built_in">pow</span>(<span class="number">2</span>,j-<span class="number">1</span>) &lt; sz) {
        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i++ )
            <span class="keyword">if</span>( (i + <span class="built_in">pow</span>(<span class="number">2</span>,j-<span class="number">1</span>)) &lt; sz )
                table[i][j] = min(table[i][j-<span class="number">1</span>], table[i+<span class="built_in">pow</span>(<span class="number">2</span>, j-<span class="number">1</span>)][j-<span class="number">1</span>]);
        j++;
    }
    <span class="keyword">return</span> table;
}

<span class="function"><span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; table, <span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>{
    <span class="keyword">int</span> len = v - u + <span class="number">1</span>, k = <span class="keyword">int</span>(<span class="built_in">log</span>(len)/<span class="built_in">log</span>(<span class="number">2</span>));
    <span class="keyword">return</span> min(table[u][k], table[<span class="number">1</span>+v-<span class="built_in">pow</span>(<span class="number">2</span>,k)][k]);
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>RMQ (Range Minimum/Maximum Query，区间最值) 问题，是指给定一个区间，然后询问在区间某一局部区域的最值是什么。比如给出一个长度为$n$的数组$N$，然后每次给出索引号$i$和$j$，问：$N[i]$和$N[j]$之间的最大（小）值是什么。</p>]]>
    
    </summary>
    
      <category term="algorithm" scheme="http://tjgao.github.io/tags/algorithm/"/>
    
      <category term="dynamic programming" scheme="http://tjgao.github.io/tags/dynamic-programming/"/>
    
      <category term="动态规划" scheme="http://tjgao.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="算法" scheme="http://tjgao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="技术" scheme="http://tjgao.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Suffix array I]]></title>
    <link href="http://tjgao.github.io/2015/08/11/Suffix-array-I/"/>
    <id>http://tjgao.github.io/2015/08/11/Suffix-array-I/</id>
    <published>2015-08-11T13:00:33.000Z</published>
    <updated>2015-08-11T15:24:38.000Z</updated>
    <content type="html"><![CDATA[<p>Suffix array 是一种很奇妙的数据结构，在字符串处理中有很多重要的用途。很多看上去复杂的字符串问题，在已经创建了 suffix array之后，往往能够在线性时间之内解决。</p>
<p>Suffix array 其实只是 suffix tree 的一种简化，而 suffix tree，只是 trie 的一个特例。如果有了 trie 的概念，那么所谓的 suffix tree， 其实只是用字符串 S 的所有后缀构建的一个 trie。所谓后缀，比如对于字符串 bananas, 其所有的后缀包括了 bananas, ananas, nanas, anas, nas, as, s。这些后缀构成的 trie 如下：</p>
<a id="more"></a>
<p><img src="http://facweb.cs.depaul.edu/mobasher/classes/csc575/Suffix_Trees/FIGURE1.gif" alt="suffix tree"></p>
<p>而 suffix array 则是 S 的所有后缀的一个字典序的简洁记法。 比如 bananas 的所有后缀按照字典序排序为： ananas, anas, as, bananas, nanas, nas, s。如果再注意到只需要记录各个后缀的开头字母的索引就可以了，那么得到一个数组，结果为：1 3 5 0 2 4 6, 这就是 suffix array，它和 suffix tree 有着很紧密的联系。</p>
<p>根据这个定义，写一段代码来获取 suffix array 似乎颇为容易：</p>
<pre><code><span class="comment">//A very naive implementation</span>
<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getSA_naive(<span class="built_in">string</span> s) {
    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;
    <span class="keyword">int</span> len = s.length();
    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; tmp;
    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++ )
        tmp[s.substr(i, len-i)] = i;
    <span class="keyword">for</span>( <span class="keyword">auto</span> it = tmp.begin(); it!=tmp.end(); ++it )
        v.push_back(it-&gt;second);
    <span class="keyword">return</span> v;
}
</code></pre><p>再看看运行时间，字符串长度为n，n个字串排序，运行时间应为$O(nlgn)$。而每个字符串的比较又是$O(n)$，则总体时间复杂度为$O(n^2lgn)$。此处使用了C++的map，自带排序，所以找不到字符串排序的部分。但无论这个隐藏的排序在哪里，总是避免不了的。</p>
<p>由于Suffix array的重要用途，近几十年很多研究者投入到其获取算法的改进中。最近的一篇论文”A taxonomy of suffix array construction algorithms”指出：</p>
<p>1) Practical space-efficient suffix array construction algorithms (SACAs) exist that require worst-case time linear in string length;<br>2) SACAs exist that are even faster in practice, though with supralinear worstcase construction time requirements;<br>3) Any problem whose solution can be computed using suffix trees is solvable with the same asymptotic complexity using suffix arrays.</p>
<p>这种改进也不知道最后会达到什么程度，总而言之，线性时间的Suffix array获得是没有问题的。任何能够用 suffix tree 来解决的问题，也可以通过高效的 suffix array 获取算法来解决。</p>
<p>最常见的几种求 suffix array 的有 prefix doubling 和 DC3 算法。 其中 prefix doubling (倍增算法)是最早的高效获取 suffix array 的尝试，也比较清晰，实现起来更容易。它基本思想是，naive 算法效率不好的原因是没有利用一个事实，即我们排序的一堆字符串是同一个字符串的后缀，而不是一堆随机的字符串，应该充分利用这一点。具体用语言来描述其算法是一个很困难的事情，我通过观察这张图最终理解了这个算法，并完成了一个实现。要注意，这个示意图中的示例字符串是 aabaaaab，求它的suffix array。<br><img src="http://7xl1lv.com1.z0.glb.clouddn.com/imageda.JPG" alt="prefix doubling"><br>代码也附上。我相信还有各种可以优化的余地，但基本思路大致如此。</p>
<pre><code><span class="comment">//Prefix doubling</span>
<span class="keyword">typedef</span> <span class="keyword">struct</span> tagENTRY {
    <span class="keyword">int</span> pr[<span class="number">2</span>];
    <span class="keyword">int</span> idx;
    tagENTRY() {
       pr[<span class="number">0</span>] = pr[<span class="number">1</span>] = idx = -<span class="number">1</span>;
    }
} ENTRY;

<span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ENTRY&amp; e1, ENTRY&amp; e2 )</span> </span>{
    <span class="keyword">return</span> ( e1.pr[<span class="number">0</span>] == e2.pr[<span class="number">0</span>] ) ? ( e1.pr[<span class="number">1</span>] &lt; e2.pr[<span class="number">1</span>] ) : ( e1.pr[<span class="number">0</span>] &lt; e2.pr[<span class="number">0</span>] );
}

<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">vector</span>&lt;ENTRY&gt;&amp; entry, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rank)</span> </span>{
    sort( entry.begin(), entry.end(), cmp );
    <span class="keyword">int</span> n = <span class="number">0</span>, e1 = entry[<span class="number">0</span>].pr[<span class="number">0</span>], e2 = entry[<span class="number">0</span>].pr[<span class="number">1</span>];
    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;entry.size(); i++ ) {
        <span class="keyword">if</span>( e1 != entry[i].pr[<span class="number">0</span>] || e2 != entry[i].pr[<span class="number">1</span>] ) {
            n++;
            e1 = entry[i].pr[<span class="number">0</span>];
            e2 = entry[i].pr[<span class="number">1</span>];
        }
        rank[entry[i].idx] = n;
    }
    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;entry.size(); i++ )  {
        entry[i].pr[<span class="number">0</span>] = rank[entry[i].idx];
    }
}

<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getSA_pd(<span class="built_in">string</span> s) {
    <span class="keyword">int</span> len = s.length();
    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rank(len);
    <span class="built_in">vector</span>&lt;ENTRY&gt; entry(len);
    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++ ) {
        entry[i].pr[<span class="number">0</span>] = s[i];
        entry[i].idx = i;
    }
    update( entry, rank);
    <span class="keyword">for</span>( <span class="keyword">int</span> step=<span class="number">1</span>; step&lt;len; step*=<span class="number">2</span> ) {
        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++ ) {
            <span class="keyword">if</span>( entry[i].idx + step &lt; len )
                entry[i].pr[<span class="number">1</span>] = rank[entry[i].idx+step];
            <span class="keyword">else</span>
                entry[i].pr[<span class="number">1</span>] = -<span class="number">1</span>;
        }
        update( entry, rank);
    }
    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(len);
    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++ ) {
        v[rank[i]] = i;
    }
    <span class="keyword">return</span> v;
}
</code></pre><p>注意，rank是每次完成后的排名，其含义是，后缀索引为i的名次是rank[i]。我们需要的 suffix array，其含义是从小到大排出所有的后缀，所以这两正好是反的。假设 value = rank[i]， 则对于suffix array，有 sa[value] == i，所以最后求出suffix array并返回。</p>
<p>通过观察getSA_pd函数中的循环可以知道，最外层的循环次数为$lgn$，内部的for循环为$n$，update函数执行了一次sort，复杂度为$nlgn$，其余循环操作均为$n$，所以最终的复杂度为$n(lgn)^2$。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Suffix array 是一种很奇妙的数据结构，在字符串处理中有很多重要的用途。很多看上去复杂的字符串问题，在已经创建了 suffix array之后，往往能够在线性时间之内解决。</p>
<p>Suffix array 其实只是 suffix tree 的一种简化，而 suffix tree，只是 trie 的一个特例。如果有了 trie 的概念，那么所谓的 suffix tree， 其实只是用字符串 S 的所有后缀构建的一个 trie。所谓后缀，比如对于字符串 bananas, 其所有的后缀包括了 bananas, ananas, nanas, anas, nas, as, s。这些后缀构成的 trie 如下：</p>]]>
    
    </summary>
    
      <category term="algorithm" scheme="http://tjgao.github.io/tags/algorithm/"/>
    
      <category term="string" scheme="http://tjgao.github.io/tags/string/"/>
    
      <category term="suffix array" scheme="http://tjgao.github.io/tags/suffix-array/"/>
    
      <category term="字符串" scheme="http://tjgao.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="算法" scheme="http://tjgao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="技术" scheme="http://tjgao.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello hexo]]></title>
    <link href="http://tjgao.github.io/2015/08/09/Hello-hexo/"/>
    <id>http://tjgao.github.io/2015/08/09/Hello-hexo/</id>
    <published>2015-08-09T07:49:17.000Z</published>
    <updated>2015-08-09T07:50:31.000Z</updated>
    <content type="html"><![CDATA[<p>Nice, a fresh start</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Nice, a fresh start</p>
]]>
    </summary>
    
  </entry>
  
</feed>
